@using SOPACE_MVC.Models
@model SOPACE_MVC.Models.InsertPersonUser

@{
    ViewBag.Title = "InputDataKaryawan";
    Layout = "~/Views/MasterLayout/MasterAdmin.cshtml";
}
<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h1 class="page-header">Input Data Karyawan</h1>
        </div>
        <!-- /.col-lg-12 -->
    </div>
    <!-- /.row -->
    <div class="row">
        @using (Html.BeginForm("Update", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", id = "formAdd" }))
        {
            <div>
                <h3>Informasi Umum</h3>
                <section>
                    <div class="form-group">
                        <label> NIP *</label>
                        <div class="input-group">
                            @Html.EditorFor(model => model.Personal_Information.NIP, new { htmlAttributes = new { @class = "form-control", placeholder = "NIP", @readonly="readonly" } })
                            @*<div class="input-group-addon" style="padding:0px; background-color:none; border:none">
                                <span>
                                    <input type="button" class="btn btn-primary" value="Generate NIP" id="btn_generate_nip" />
                                </span>
                            </div>*@
                        </div>
                    </div>
                    <div class="form-group">
                        <label> Nama Pegawai *</label>
                        @Html.EditorFor(model => model.Personal_Information.nama_pegawai, new { htmlAttributes = new { @class = "form-control", placeholder = "Nama Pegawai", required = "" } })
                    </div>
                    <div class="form-group">
                        <label> Jenis Kelamin *</label>
                        @Html.DropDownListFor(model => model.Personal_Information.jenis_kelamin,
                            new SelectList(Enum.GetValues(typeof(Gender))),
                            new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        <label> Agama *</label>
                        @Html.DropDownListFor(model => model.Personal_Information.agama,
                            new SelectList(Enum.GetValues(typeof(Agama))),
                            new { @class = "form-control" })
                    </div>
                    <p>(*) Harus di isi</p>
                </section>
                <h3>Detail</h3>
                <section>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label> Tanggal Lahir *</label>
                                @*@Html.EditorFor(model => model.Personal_Information.tgl_lahir,new { htmlAttributes = new { @class = "form-control" } })*@
                                @Html.EditorFor(model => model.Personal_Information.tgl_lahir, new { htmlAttributes = new { @class = "form-control", type = "date", required = "true" } })
                                
                            </div>
                            <div class="form-group">
                                <label> Nomor KTP *</label>
                                @Html.EditorFor(model => model.Personal_Information.no_ktp, new { htmlAttributes = new { @class = "form-control", placeholder = "Nomor KTP", required = "true" } })
                            </div>
                            <div class="form-group">
                                <label> Alamat Identitas</label>
                                @Html.TextAreaFor(model => model.Personal_Information.alamat_identitas, new { @class = "form-control", rows = "3" })
                            </div>
                            <div class="form-group">
                                <label> Alamat Domisili</label>
                                @Html.TextAreaFor(model => model.Personal_Information.alamat_domisili, new { @class = "form-control", rows = "3" })
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group">
                                <label> Email</label>
                                @Html.EditorFor(model => model.Personal_Information.email, new { htmlAttributes = new { @class = "form-control", type = "email", placeholder = "Email" } })
                            </div>
                            <div class="form-group">
                                <label> Pendidikan</label>
                                @Html.EditorFor(model => model.Personal_Information.pendidikan, new { htmlAttributes = new { @class = "form-control", placeholder = "Pendidikan" } })
                            </div>
                            <div class="form-group">
                                <label> Jurusan</label>
                                @Html.EditorFor(model => model.Personal_Information.jurusan, new { htmlAttributes = new { @class = "form-control", placeholder = "Jurusan" } })
                            </div>
                            <div class="form-group">
                                <label> NPWP</label>
                                @Html.EditorFor(model => model.Personal_Information.NPWP, new { htmlAttributes = new { @class = "form-control", placeholder = "NPWP" } })
                            </div>
                            <div class="form-group">
                                <label> Tanggal Masuk *</label>
                                @Html.EditorFor(model => model.Personal_Information.tgl_masuk, new { htmlAttributes = new { @class = "form-control", type = "date", required = "true" } })
                            </div>
                            <div class="form-group">
                                <label> Status Pajak</label>
                                @Html.EditorFor(model => model.Personal_Information.status_pajak, new { htmlAttributes = new { @class = "form-control", placeholder = "Status Pajak" } })
                            </div>
                        </div>
                    </div>

                    <p>(*) Harus di isi</p>
                </section>
                <h3>Account</h3>
                <section>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label> Username *</label>
                                <div class="input-group">
                                    @Html.EditorFor(model => model.User.username, new { htmlAttributes = new { @class = "form-control", placeholder = "Username", required = "true" } })
                                    <div class="input-group-addon" style="padding:0px; background-color:none; border:none">
                                        <span>
                                            <input type="button" class="btn btn-primary" value="Generate Username" id="btn_generate_usrnm" />
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label> Password *</label>
                                @Html.EditorFor(model => model.User.password, new { htmlAttributes = new { @class = "form-control", placeholder = "Password", @readonly = "readonly" } })
                            </div>
                            <div>
                                @Html.HiddenFor(model => model.User.NIP)
                                @Html.HiddenFor(model => model.User.role)
                            </div>
                        </div>
                    </div>
                    <p>(*) Harus di isi</p>
                </section>
                <h3>File Dokumen</h3>
                <section>
                    <div class="form-group">
                        <label> Foto Profil</label>
                        <div class="input-group">
                            <input type="file" name="fotoProfil" id="inpFileProfil" />
                        </div>
                        <label> Foto Profil</label>
                        <div class="input-group">
                            <input type="file" name="fotoBKRek" id="inpFileRek" />
                        </div>
                        <label> Foto Profil</label>
                        <div class="input-group">
                            <input type="file" name="CV" id="inpFileCV" />
                        </div>
                    </div>
                </section>

            </div>

        }
    </div>
</div>

@section Script{
    <script src="~/Scripts/lodash.js"></script>
    <script>
        $().ready(function () {
            $("#Personal_Information_tgl_lahir").val('@Model.Personal_Information.tgl_lahir.Value.ToString("yyyy-MM-dd")');
            $("#Personal_Information_tgl_masuk").val('@Model.Personal_Information.tgl_masuk.Value.ToString("yyyy-MM-dd")');
        });

        var form = $("#formAdd");


        jQuery.validator.addMethod("NIPFormat", function (value, element) {
            return this.optional(element) || /^\d*([ACE]{3}).([0-9]{4}).([0-9]{3}$)/.test(value);
        }, "Format NIP Salah");

        jQuery.validator.addMethod("NIKFormat", function (value, element) {
            let noKTPregex = /^((1[1-9])|(21)|([37][1-6])|(5[1-4])|(6[1-5])|([8-9][1-2]))[0-9]{2}[0-9]{2}(([0-6][0-9])|(7[0-1]))((0[1-9])|(1[0-2]))([0-9]{2})[0-9]{4}$/;
            return this.optional(element) || noKTPregex.test(value);
        }, "Format nomor KTP salah");

        form.validate({
            errorPlacement: function errorPlacement(error, element) { element.after (error); },
            rules: {
                "Personal_Information.NIP": {
                    required: true,
                    NIPFormat: true
                },
                "Personal_Information.no_ktp": {
                    required: true,
                    NIKFormat: true
                },
                "Personal_Information.email": {
                    email: true
                }

            },
            messages: {
                "Personal_Information.NIP": {
                    required: "NIP harus di isi"
                },
                "Personal_Information.no_ktp": {
                    required: "Nomor KTP harus di isi"
                },
                "Personal_Information.nama_pegawai": "Nama Pegawai harus di isi",
                "Personal_Information.tgl_lahir": "Tanggal Lahir harus di isi",
                "Personal_Information.tgl_masuk": "Tanggal Masuk harus di isi",
                "Personal_Information.email": {
                    email: "Format email salah"
                }
            }
        });
        form.children("div").steps({
            headerTag: "h3",
            bodyTag: "section",
            transitionEffect: "slideLeft",
            onInit: function (event, current) {
                $("#formAdd input[id=btn_generate_nip]").on("click", function () {
                    $.get('@Url.Action("CekNIP", "PersonInfo")', function (data) {
                        $("#Personal_Information_NIP").val(data);
                        $("#Personal_Information_NIP").focusout();
                    });
                });

                $("#User_password").val("ACE" + (new Date()).getFullYear());
                $("#btn_generate_usrnm").on("click", function () {
                    let nmArr = $("#Personal_Information_nama_pegawai").val().split(" ");
                    let tglhrArr = $("#Personal_Information_tgl_lahir").val().split("-");
                    let usrnmArr = _.sampleSize(nmArr, 2);
                    usrnameVal = usrnmArr[0] + "_" + usrnmArr[1];
                    $("#User_username").val(usrnameVal);
                    $("#User_username").keyup();
                });

                $("#User_username").keyup(function () {
                    $('span.error-keyup-2').remove();
                    $.get('@Url.Action("IsUsernameUsed","PersonInfo")',
                        { 'username': $("#User_username").val() },
                        function (data) {
                            if (data == "User Already Used") {
                                $("#User_username").closest("div").after('<span class="alert alert-danger error-keyup-2" style="padding:4px">Username Already Used</span>');
                                $("#User_username").css("border-color", "red");
                            } else {
                                $("#User_username").css("border-color", "green");
                            }
                        });
                });

                $("input[type=file]").on("change", function (value) {
                    console.log(value.target.name);
                    let formdata = new FormData();
                    formdata.append(value.target.files[0].name, value.target.files[0]);
                    formdata.append("tipeFile", value.target.name);
                    formdata.append("nip", "ACE.2019.001");

                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '@Url.Action("Upload","PersonInfo")');
                    xhr.send(formdata);
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4 && xhr.status == 200) {
                            alert(xhr.responseText);
                        }
                    }
                    return false;

                });
            },
            onStepChanging: function (event, currentIndex, newIndex) {
                if (currentIndex > 0) {
                    $("#User_NIP").val($("#Personal_Information_NIP").val());
                    $("#User_role").val("user");
                }
                form.validate().settings.ignore = ":disabled,:hidden";
                return form.valid();
            },
            onFinishing: function (event, currentIndex) {
                form.validate().settings.ignore = ":disabled";
                return form.valid();
            },
            onFinished: function (event, currentIndex) {
                event.preventDefault();
                let formdata = form.serialize();
                //let formdata = new FormData(form);
                $.ajax({
                    url: form.attr('action'), @*'@Url.Action("Add","PersonInfo")'*@
                    type: 'POST',
                    data: formdata
                });
                alert("Update Data Success");
                location.href = '/Admin/ViewAll';
            },
            labels: {
                previous: '<i class="fa fa-arrow-circle-left"></i> Prev',
                next: 'Next <i class="fa fa-arrow-circle-right"></i>',
                finish: 'Update <i class="fa fa-save"></i>'
            }
        });        

    </script>
}
